<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>youlan-boot</artifactId>
        <groupId>com.youlan</groupId>
        <version>${revision}</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>youlan-admin</artifactId>
    <packaging>jar</packaging>

    <dependencies>
        <dependency>
            <groupId>com.youlan</groupId>
            <artifactId>youlan-tools</artifactId>
        </dependency>
        <dependency>
            <groupId>com.youlan</groupId>
            <artifactId>youlan-system</artifactId>
        </dependency>
        <dependency>
            <groupId>com.youlan</groupId>
            <artifactId>youlan-common-excel</artifactId>
        </dependency>
        <dependency>
            <groupId>com.youlan</groupId>
            <artifactId>youlan-common-captcha</artifactId>
        </dependency>
        <dependency>
            <groupId>com.youlan</groupId>
            <artifactId>youlan-common-crypto</artifactId>
        </dependency>
        <dependency>
            <groupId>com.youlan</groupId>
            <artifactId>youlan-plugin-sms</artifactId>
        </dependency>
        <dependency>
            <groupId>com.youlan</groupId>
            <artifactId>youlan-plugin-storage</artifactId>
        </dependency>
        <dependency>
            <groupId>com.youlan</groupId>
            <artifactId>youlan-plugin-pay</artifactId>
        </dependency>
        <dependency>
            <groupId>cn.dev33</groupId>
            <artifactId>sa-token-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>cn.dev33</groupId>
            <artifactId>sa-token-redis-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-openapi3-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <dependency>
            <groupId>com.taobao.arthas</groupId>
            <artifactId>arthas-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-undertow</artifactId>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>banner.txt</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <!-- *******************************通过Jar包部署[开始]******************************* -->
            <!-- SpringBoot构建Jar插件 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- *******************************通过Jar包部署[结束]******************************* -->

            <!-- *******************************通过Docker镜像部署[开始]******************************* -->
            <!-- SpringBoot构建Jar插件 -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <executions>
                    <!-- 镜像构建配置 -->
                    <execution>
                        <id>image-build</id>
                        <!-- 触发镜像构建操作的Maven执行阶段，建议package/install，不需要时指定为none -->
                        <phase>none</phase>
                        <goals>
                            <goal>build</goal>
                            <goal>tag</goal>
                        </goals>
                    </execution>
                    <!-- 镜像推送配置 -->
                    <execution>
                        <id>image-push</id>
                        <!-- 触发镜像推送操作的Maven执行阶段，建议install/deploy，不需要时指定为none -->
                        <phase>none</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- 指定Dockerfile文件位置 -->
                    <dockerfile>${project.basedir}/Dockerfile</dockerfile>
                    <!-- 指定镜像名称 -->
                    <repository>youlan-admin</repository>
                    <!-- 指定镜像名称 -->
                    <tag>latest</tag>
                    <!-- 授权时是否使用Maven的settings.xml中的配置，false时用户名/密码需在当前pom.xml中配置，存在安全隐患 -->
                    <useMavenSettingsForAuth>false</useMavenSettingsForAuth>
                    <!-- 镜像仓库用户名 -->
                    <username>youlan</username>
                    <!-- 镜像仓库密码 -->
                    <password>youlan</password>
                </configuration>
            </plugin>
            <!-- *******************************通过Docker镜像部署[结束]******************************* -->
        </plugins>
    </build>
</project>