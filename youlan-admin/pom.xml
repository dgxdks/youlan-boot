<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>youlan-boot</artifactId>
        <groupId>com.youlan</groupId>
        <version>${revision}</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>youlan-admin</artifactId>
    <packaging>jar</packaging>

    <dependencies>
        <dependency>
            <groupId>com.youlan</groupId>
            <artifactId>youlan-tools</artifactId>
        </dependency>
        <dependency>
            <groupId>com.youlan</groupId>
            <artifactId>youlan-system</artifactId>
        </dependency>
        <dependency>
            <groupId>com.youlan</groupId>
            <artifactId>youlan-common-excel</artifactId>
        </dependency>
        <dependency>
            <groupId>com.youlan</groupId>
            <artifactId>youlan-common-captcha</artifactId>
        </dependency>
        <dependency>
            <groupId>com.youlan</groupId>
            <artifactId>youlan-common-crypto</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-openapi3-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <dependency>
            <groupId>com.taobao.arthas</groupId>
            <artifactId>arthas-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-undertow</artifactId>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>banner.txt</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <!-- *******************************通过Jar包部署[开始]******************************* -->
            <!-- SpringBoot构建Jar插件 -->
<!--            <plugin>-->
<!--                <groupId>org.springframework.boot</groupId>-->
<!--                <artifactId>spring-boot-maven-plugin</artifactId>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <goals>-->
<!--                            <goal>repackage</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
            <!-- *******************************通过Jar包部署[结束]******************************* -->

            <!-- *******************************通过Zip包部署[开始]******************************* -->
            <!-- Maven构建jar插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <!-- 不加入jar包的文件类型或者路径 -->
                    <excludes>
                        <!-- 秘钥文件目录 -->
                        <exclude>/crypto/</exclude>
                        <!-- 国际化资源文件目录 -->
                        <exclude>/i18n/</exclude>
                        <!-- .yml格式文件 -->
                        <exclude>*.yml</exclude>
                        <!-- .txt格式文件 -->
                        <exclude>*.txt</exclude>
                        <!-- .xdb格式文件 -->
                        <exclude>*.xdb</exclude>
                        <!-- .xml格式文件 -->
                        <exclude>*.xml</exclude>
                    </excludes>
                    <archive>
                        <manifest>
                            <!-- 程序启动主类 -->
                            <mainClass>com.youlan.AdminApplication</mainClass>
                            <!-- 是否把三方依赖jar添加至MANIFEST.MF文件中的Class-Path类路径配置中 -->
                            <addClasspath>true</addClasspath>
                            <!-- 三方依赖jar文件路径前缀，因为要把jar都放在lib目录下，所以前缀是lib -->
                            <classpathPrefix>lib</classpathPrefix>
                            <!-- 使用jar的唯一版本，不jar的详细时间戳版本 -->
                            <useUniqueVersions>false</useUniqueVersions>
                        </manifest>
                        <manifestEntries>
                            <!-- 因为资源文件都放在conf目录下，所以向Class-Path类路径配置中添加资源配置目录 -->
                            <Class-Path>conf/</Class-Path>
                        </manifestEntries>
                    </archive>
                    <outputDirectory>${project.build.directory}</outputDirectory>
                </configuration>
            </plugin>
            <!-- Maven复制依赖jar至指定目录插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib/</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Maven复制资源文件至指定目录插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>src/main/resources</directory>
                                </resource>
                            </resources>
                            <outputDirectory>${project.build.directory}/conf</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Maven组装多个文件目录为压缩包插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <!-- 这个插件需要指定一个配置文件 -->
                    <descriptors>
                        <descriptor>assembly/assembly.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <!-- 自定义 -->
                        <id>zip</id>
                        <phase>package</phase>
                        <goals>
                            <!-- 只执行一次 -->
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- *******************************通过Zip包部署[结束]******************************* -->
        </plugins>
    </build>
</project>